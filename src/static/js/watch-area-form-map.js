var CommunityDiscussions = CommunityDiscussions || {};

(function(CD) {
  CD.initWatchAreaMap = function(options) {
        // Generated by the form
    var $input = $('#id_fence'),
        map = new L.Map(options.el, {scrollWheelZoom: false}),
        layer = new L.TileLayer(options.tileUrl, {maxZoom: 17, attribution: options.tileAttribution}),
        $initAreaBtn = $('#init-watch-area-btn'),
        area;

    map.setView(options.center, 13).addLayer(layer);

    function setAreaFormElement() {
      $input.val(CD.Utils.toWKT(area));
    }

    // Reset the the watch area to a rectable that is 25% smaller than the bounds
    function resetWatchArea() {
      // Calc the bounds of the area
      var areaBounds = map.getBounds().pad(-0.25);

      // Update the button text to the reset message (we're no longer "setting")
      $initAreaBtn.text(options.resetButtonMsg);

      // Remove the polygon from the map if it exists
      if (area) {
        map.removeLayer(area);
      }

      // Make a new polygon (I thought it needed a closing point, but no)
      area = L.polygon([
        areaBounds.getSouthWest(),
        areaBounds.getSouthEast(),
        areaBounds.getNorthEast(),
        areaBounds.getNorthWest()
      ], {
        color: '#478e23',
        weight: 2,
        opacity: 1,
        fillOpacity: 0.3
      });

      // Init the hidden input element
      setAreaFormElement();

      // Turn on editing
      area.editing.enable();

      // On edit, update the hidden input element
      area.on('edit', function() {
        setAreaFormElement();
      });

      // Put it on the map
      area.addTo(map);
    }

    // When the user clicks the init button
    $initAreaBtn.click(function(evt) {
      evt.preventDefault();

      // Confirm if an area exists already
      if (area && window.confirm(options.resetConfirmationMsg)) {
        resetWatchArea();
      } else {
        resetWatchArea();
      }
    });

  };
})(CommunityDiscussions);